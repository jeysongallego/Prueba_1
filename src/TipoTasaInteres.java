package co.com.psl.erpsaas.financiero.colocaciones.tasainteres;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import co.com.psl.erpsaas.estructuraempresarial.PersonaNaturalJuridica;
import co.com.psl.erpsaas.financiero.colocaciones.core.shared.TasaNoDefinidaException;
import co.com.psl.erpsaas.financiero.colocaciones.core.tasasinteres.AdministradorTasasDeInteres;
import co.com.psl.erpsaas.seguridad.ERPQuery;
import co.com.psl.erpsaas.util.DateUtilities;
import co.com.psl.jbrain.ObjectIntegrityViolationRuntimeException;
import co.com.psl.jbrain.ObjectNotFoundException;
import co.com.psl.jbrain.PslRuntimeException;
import co.com.psl.jbrain.cache.CacheSpace;
import co.com.psl.jbrain.cache.CacheSystem;
import co.com.psl.jbrain.persistence.DatabasePersistenceManager;
import co.com.psl.jbrain.persistence.PEntity;
import static co.com.psl.jbrain.metadata.MetadataFunctions.*;
import java.util.*;
import co.com.psl.jbrain.*;
import co.com.psl.jbrain.application.*;
import co.com.psl.jbrain.persistence.*;
import co.com.psl.erpsaas.financiero.colocaciones.tasainteres.DefinicionTasaInteres;

// AUTOGENERATED CODE - DO NOT MODIFY 
/**
 * Define todos los tipos de tasa.  Por ejemplo:
 * - Fija Credito
 * - Fija Seguros
 * - TCC
 * - DTF
 * - USURA
 * - MORA
 * @autor pacosta
 * @date Thu Apr 18 08:10:45 COT 2013
 * 
 * <p>
 * Copyright (c) 2012. All rights reserved.<BR>
 * Productora de Software S.A.<BR>
 * @author PSL.
 * </p>
 */
public class TipoTasaInteres extends PEntity  {

  private static final long serialVersionUID = -46866361152432829L;
  

  /** Compañia */
  protected String uuidCompania;

  /** Código */
  protected String code;

  /** Descripción */
  protected String description;

  /** indica si esta tasa es fija o variable.  

Cuando la tasa es fija, los valores definidos en la entidad Tasas, con los valores por defecto que la compañía va a dar. */
  protected boolean esTasaFija;

  /** Aqui se almacena una expresion cron para se dispare un proceso que recurde que la tasa se debe actualizar. (Opcional) */
  protected String expresionCronActualizacionTasa;

  /** Compañia */
  protected PersonaNaturalJuridica compania;

  /** DefinicionTasaInteres */
  protected DefinicionTasaInteres definicionTasaInteres;

  /** Clave primaria de la entidad. */
  protected String definicionTasaInteres_uuid;


  final public static String CLASSID = "ip1";
  /**
  * Default Constructor
  */
  public TipoTasaInteres () {
    super();
  }
  /**
   * Constructor with mandatory attributes
   */  
  public TipoTasaInteres (String uuidCompania, String code, String description) {
   	super();
    this.setUuidCompania(uuidCompania);
    this.setCode(code);
    this.setDescription(description);
    
  } 
   /**
   * Constructor with mandatory attributes
   */  
  public TipoTasaInteres (String code, String description, PersonaNaturalJuridica compania) {
    super();
    this.setCode(code);
    this.setDescription(description);
    this.setCompania(compania);
    
  }
  
  /**
  */
  public static TipoTasaInteres findByPrimaryKey (String uuidCompania, String code) throws ObjectNotFoundException {
    return (TipoTasaInteres) DatabasePersistenceManager.getPersistenceManager("TipoTasaInteres").find(TipoTasaInteres.class , new Object[] { uuidCompania, code });
  }
  
  /**
   * Retorna la clave primaria en el orden definido en el metadata.
   */
  @Override
  public Object[] getPrimaryKey() {
    return new Object[]{getUuidCompania(), getCode()};
  }
  
  public String getClassId() {
    return CLASSID;
  }
  

  /**
   * Get Compañia 
   * @return uuidCompania
   */
  public String getUuidCompania() {
    return uuidCompania;
  }

  /** 
   * Set Compañia
   * @param uuidCompania
   */
  public void setUuidCompania(String uuidCompania) {
    this.uuidCompania = uuidCompania;
    this.compania = null;
    
  }

  /**
   * Get Código 
   * @return code
   */
  public String getCode() {
    return code;
  }

  /** 
   * Set Código
   * @param code
   */
  public void setCode(String code) {
    this.code = code;
  }
	
  /**
   * Get Descripción 
   * @return description
   */
  public String getDescription() {
    return description;
  }

  /** 
   * Set Descripción
   * @param description
   */
  public void setDescription(String description) {
    this.description = description;
  }
	
  /**
   * Get indica si esta tasa es fija o variable.    Cuando la tasa es fija, los valores definidos en la entidad Tasas, con los 
   * valores por defecto que la compañía va a dar. 
   * @return esTasaFija
   */
  public boolean isEsTasaFija() {
    return esTasaFija;
  }

  /** 
   * Set indica si esta tasa es fija o variable.    Cuando la tasa es fija, los valores definidos en la entidad Tasas, con los 
   * valores por defecto que la compañía va a dar.
   * @param esTasaFija
   */
  public void setEsTasaFija(boolean esTasaFija) {
    this.esTasaFija = esTasaFija;
  }
	
  /**
   * Get Aqui se almacena una expresion cron para se dispare un proceso que recurde que la tasa se debe actualizar. (Opcion
   * al) 
   * @return expresionCronActualizacionTasa
   */
  public String getExpresionCronActualizacionTasa() {
    return expresionCronActualizacionTasa;
  }

  /** 
   * Set Aqui se almacena una expresion cron para se dispare un proceso que recurde que la tasa se debe actualizar. (Opcion
   * al)
   * @param expresionCronActualizacionTasa
   */
  public void setExpresionCronActualizacionTasa(String expresionCronActualizacionTasa) {
    this.expresionCronActualizacionTasa = expresionCronActualizacionTasa;
  }
	
  /**
   * Get Compañia 
   * @return compania
   */
  public PersonaNaturalJuridica getCompania() {
    if( compania == null) {
      if(uuidCompania== null) {
	      if(isPersisted()) {
	        throw new ObjectIntegrityViolationRuntimeException("No compania Found for PersonaNaturalJuridica :" + "uuidCompania = " + uuidCompania);
	      } else {
	        return null;
	      }
      }
      try {
        compania = PersonaNaturalJuridica.findByPrimaryKey(uuidCompania);
      } catch(ObjectNotFoundException ex) {
        throw new ObjectIntegrityViolationRuntimeException("No compania Found for  " + "uuidCompania = " + uuidCompania, ex);
      }
      
    }
    return compania;
  }

  /** 
   * Set Compañia
   * @param compania
   */
  public void setCompania(PersonaNaturalJuridica compania) {
    this.compania = compania;
    
    
    if (compania == null) {
      return;
    }
    if(!this.isPersisted() || this.uuidCompania == null) {
      this.uuidCompania = compania.getUuid();
    } else if( compania.getUuid() == null || !this.uuidCompania.equals(compania.getUuid()) ) {
      throw new ObjectIntegrityViolationRuntimeException("Se está tratando de cambiar el valor en  de una clave por otra: uuidCompania. Valor actual: " + this.uuidCompania + " Código nuevo:" + compania.getUuid());
    }
    
  }

  /**
   * Get DefinicionTasaInteres 
   * @return definicionTasaInteres
   */
  public DefinicionTasaInteres getDefinicionTasaInteres() {
    if( definicionTasaInteres == null) {
      if(definicionTasaInteres_uuid== null) {
	      return null;
      }
      try {
        definicionTasaInteres = DefinicionTasaInteres.findByPrimaryKey(definicionTasaInteres_uuid);
      } catch(ObjectNotFoundException ex) {
        throw new ObjectIntegrityViolationRuntimeException("No definicionTasaInteres Found for  " + "definicionTasaInteres_uuid = " + definicionTasaInteres_uuid, ex);
      }
      
    }
    return definicionTasaInteres;
  }

  /** 
   * Set DefinicionTasaInteres
   * @param definicionTasaInteres
   */
  public void setDefinicionTasaInteres(DefinicionTasaInteres definicionTasaInteres) {
    this.definicionTasaInteres = definicionTasaInteres;
    this.definicionTasaInteres_uuid = definicionTasaInteres == null ? null : definicionTasaInteres.getUuid();
    
    
    if (definicionTasaInteres == null) {
      return;
    }
    
  }

  /**
   * Get Clave primaria de la entidad. 
   * @return definicionTasaInteres_uuid
   */
  public String getDefinicionTasaInteres_uuid() {
    return definicionTasaInteres_uuid;
  }

  /** 
   * Set Clave primaria de la entidad.
   * @param definicionTasaInteres_uuid
   */
  public void setDefinicionTasaInteres_uuid(String definicionTasaInteres_uuid) {
    this.definicionTasaInteres_uuid = definicionTasaInteres_uuid;
    this.definicionTasaInteres = null;
    
  }



// AUTOGENERATED CODE - DO NOT MODIFY 

  // Write your own code under this line.
  
  /** Lista con las tasas de interes. */
  private ArrayList<TasaInteres> listaTasaInteres;
  
  public ArrayList<TasaInteres> getListaTasaInteres() {
  	return this.listaTasaInteres;
  }
  
  public void setListaTasaInteres(ArrayList<TasaInteres> listaTasaInteres) {
  	this.listaTasaInteres = listaTasaInteres;
  }
  
  /** Formato usado para el manejo de Cache */
  //private SimpleDateFormat formato;
  
  private Map<String, ArrayList<TasaInteres>> mapaTasas;

  /**
   * Tasas de interes en un rango de fechas 
   *
   * 
   * @param fechaInicial Fecha inicial del rango
   * @param fechaFinal  Fecha final del rango
   * @param puntos Puntos adicionales de la respectiva tasa
   * @return {@link ArrayList} de {@link TasaInteres} en orden cronológico
   * @throws TasaNoDefinidaException
   */
  public ArrayList<TasaInteres> getTasasInteresByFechas(Date fechaInicial, Date fechaFinal, double puntos) throws TasaNoDefinidaException {
    //TODO-JGALLEGO REFACTOR A ESTE METODO SEPARANDO BLOQUES CON RESPONSABILIDADES DEFINIDAS
    ArrayList<TasaInteres> tasaslistClone = new ArrayList<>();
    String keyFechas = getKeyCache(fechaInicial,fechaFinal,puntos);

    //Es la misma ficha solo se debe calcular un rango
    boolean mismaFecha= fechaInicial.equals(fechaFinal);

    //Se consulta inicialmente en el caché de las tasas
    //Se busca primero en el cache de la clase si no se encuentra se busca en bd.
    if(getTasasInteresTipoTasaFechasMap().containsKey(keyFechas)){
      //Generar clones
      for (TasaInteres tasaInteres : getTasasInteresTipoTasaFechasMap().get(keyFechas)) {
        try {
          TasaInteres titmp = (TasaInteres) tasaInteres.clone();
          titmp.setTasaFinanciera((DefinicionTasaInteres) titmp.getTasaFinanciera().clone());
          tasaslistClone.add(titmp);
        } catch (CloneNotSupportedException e) {
          throw new PslRuntimeException(e);
        }
      }
      return tasaslistClone;
    }

    
    //Si es la misma fecha se busca un solo rango
    if(mismaFecha){
      //Se debe verificar cual de las tasas enviadas estan dentro del rango
      for (TasaInteres tasaInteres : getTasaInteresList()) {
        if((fechaInicial.after(tasaInteres.getFechaDesde()) || fechaInicial.equals(tasaInteres.getFechaDesde()))
            && (tasaInteres.getFechaHasta()==null || fechaInicial.before(tasaInteres.getFechaHasta()) ||  isFechaIgualYYYYMMMDD(fechaInicial,tasaInteres.getFechaHasta()))){
          //Crear tasa clone(copia de la original para conservar referencia original
          TasaInteres tasaClone;
          try {
            tasaClone = (TasaInteres) tasaInteres.clone();
            tasaClone.setTasaFinanciera((DefinicionTasaInteres)  tasaClone.getTasaFinanciera().clone());
            tasaClone.getTasaFinanciera().setRequiereValor(true);
            //1.Se convierte la tasa en el valor expresado por el padre.
            double valorTasaDefinicionPadre = tasaClone.getTasaFinanciera().convertirTasaA(getDefinicionTasaInteres());
            //2.Se suman los respectivos puntos
            valorTasaDefinicionPadre += puntos / 100;
            tasaClone.setTasaFinanciera((DefinicionTasaInteres) getDefinicionTasaInteres().clone());
            //Asignar valor tasa a la tasa clone
            tasaClone.getTasaFinanciera().setTasa(valorTasaDefinicionPadre);
            //Calcular tasa efectiva anual
            tasaClone.setTasaEfectivaAnual(tasaClone.getTasaFinanciera().getTasaEfectivaAnual());
            
            tasaslistClone.add(tasaClone);
            //Agregar al caché
            getTasasInteresTipoTasaFechasMap().put(keyFechas, tasaslistClone);
            break;
          } catch (CloneNotSupportedException e) {
            throw new PslRuntimeException(e);     
          }
        }		  
      }
      if(tasaslistClone.size()==0){
        SimpleDateFormat format=new SimpleDateFormat("dd/MM/yyyy");
        String fechaMostrar=format.format(fechaInicial);
        throw new TasaNoDefinidaException("No hay tasa definida para la tasa tipo: " + this.getDescription() 
            + " para la fecha: " + fechaMostrar+" .");
      }
      return tasaslistClone;
    }

    //Fecha de trabajo temporal para el cálculo de los rangos de dos fechas 
    Date fechaInicialTmp = fechaInicial;

    //Se recorren todos los rangos de fechas 
    for (TasaInteres tasaInteres : getTasaInteresList()) {
      //Bandera para validar si la tasa cumple
      boolean tasaCumple = false;
      //Formatear fechas para las diferentes comparaciones
      
      tasaInteres.setFechaDesde(DateUtilities.cutTimeDate(tasaInteres.getFechaDesde()));
      if(tasaInteres.getFechaHasta()!=null){
        tasaInteres.setFechaHasta(DateUtilities.cutTimeDate(tasaInteres.getFechaHasta()));
      }
      if((fechaInicialTmp.after(tasaInteres.getFechaDesde()) || fechaInicialTmp.equals(tasaInteres.getFechaDesde()))){
        //Si la fecha incial >= fecha desde del rango, es un rango que aplica
        tasaCumple = true;
        if (tasaInteres.getFechaHasta() != null && (tasaInteres.getFechaHasta().before(fechaInicialTmp))) {
          //Si la fecha que cierra el rango FechaHasta es menor que el rango buscado, ese rango no se incluye
          tasaCumple = false;
        }
        //Si no >= se valida si la fecha final del rango solicitado >= fechaDesde del rango en caso tal aplica tambien
      } else if(fechaFinal.after(tasaInteres.getFechaDesde()) || fechaFinal.equals(tasaInteres.getFechaDesde())){
        tasaCumple = true;
      }

      //Si la tasa cumple se calcula la tasa efectiva anual y se agrega al 
      if(tasaCumple){
        try {
          //Crear tasa clone
          TasaInteres tasaClone = (TasaInteres) tasaInteres.clone();
          tasaClone.setTasaFinanciera((DefinicionTasaInteres) tasaClone.getTasaFinanciera().clone());
          
          //1.Se convierte la tasa en el valor expresado por el padre.
          double valorTasaDefinicionPadre = tasaClone.getTasaFinanciera().convertirTasaA(getDefinicionTasaInteres());
          //2.Se suman los respectivos puntos
          valorTasaDefinicionPadre += puntos;
          //Asignar valor tasa a la tasa clone
          tasaClone.getTasaFinanciera().setTasa(valorTasaDefinicionPadre);
          //Calcular tasa efectiva anual
          tasaClone.setTasaEfectivaAnual(tasaClone.getTasaFinanciera().getTasaEfectivaAnual());
          tasaslistClone.add(tasaClone);
        } catch (CloneNotSupportedException e) {
          throw new PslRuntimeException(e);     
        }
      }

    }

    if(tasaslistClone.size()==0){
      throw new TasaNoDefinidaException("No hay tasa o tasas definidadas para la tasa tipo" + this.getDescription() 
          + " para el rango de fechas " + fechaInicial + " - " + fechaFinal + " para la compañía uuid: " + uuidCompania);
    }
    
    //Se ajusta la fecha de cierre de las tasas
    tasaslistClone.get(0).setFechaDesde(fechaInicial);
    tasaslistClone.get(tasaslistClone.size()-1).setFechaHasta(fechaFinal);
    
    //Actualizar caché
    getTasasInteresTipoTasaFechasMap().put(keyFechas, tasaslistClone);
    return tasaslistClone;
  }



  /**
   * Retorna las diferentes {@link TasaInteres} de rangos del presente {@link TipoTasaInteres}
   * @return the tasaInteresList
   */
  @SuppressWarnings({ "rawtypes", "unchecked" })
  public synchronized ArrayList<TasaInteres> getTasaInteresList() {
    CacheSpace<String, ArrayList> cacheTiposTasas = CacheSystem.getInstance().getCacheSpace("TiposTasas", String.class, ArrayList.class);
    ArrayList<TasaInteres> tasasTipoList = cacheTiposTasas.get(getUuidCompania() + getCode());
    if(tasasTipoList==null){
      tasasTipoList = getTasaXTipoConDefinicion();
      cacheTiposTasas.put(getUuidCompania() + getCode(), tasasTipoList);
    }
    return tasasTipoList;
  }
  
  
  /**
  * Arma la estructura  de Tasa incluyendo la definición.
  *
  * @return
  *
  * @author Productora de software SA
  *         jgallego
  * @since 27/08/2015
  */
  private ArrayList<TasaInteres> getTasaXTipoConDefinicion(){
    ArrayList<Object[]> tasasDefTasas = getTasaXTipoConDefinicionBD();
    ArrayList<TasaInteres> tasas = new ArrayList<>();
    for (Object[] tasaDefTasa : tasasDefTasas) {
      TasaInteres tasa = (TasaInteres) tasaDefTasa[0];
      DefinicionTasaInteres definicion = (DefinicionTasaInteres) tasaDefTasa[1];
      tasa.setTasaFinanciera(definicion);
      tasas.add(tasa);
    }
    return tasas;
  }
  
  /**
  * Realiza la consulta en BD de las Tasas de un tipo y su definición de Tasa.
  *
  * @return
  *
  * @author Productora de software SA
  *         jgallego
  * @since 27/08/2015
  */
  private ArrayList<Object[]> getTasaXTipoConDefinicionBD(){
    String sql = "SELECT ti, dtf " +
    		"FROM TasaInteres ti " +
        "INNER JOIN ti.tasaFinanciera dtf " +        
    		"WHERE ti.tipoTasa.code=:code and ti.compania.uuid=:uuidCompania " +
    		"ORDER BY ti.fechaDesde asc";
    ERPQuery<Object[]> query = new ERPQuery<Object[]>(sql,true);
    query.setParameter("uuidCompania", getUuidCompania());
    query.setParameter("code", getCode());
    return query.getResultList();
  }


  public static boolean existeCodigoTasa(String numeroCodigo, String compania) {
    ERPQuery<TipoTasaInteres> query = new ERPQuery<TipoTasaInteres>(
        "SELECT code FROM TipoTasaInteres where code = :numeroCodigo AND uuidCompania = :compania");
    query.setParameter("numeroCodigo", numeroCodigo);
    query.setParameter("compania", compania);
    return !(query.getResultList().size() == 0);
  }


  /**
   * Key para el mapa de fechas por un rango de fechas + puntos
   * @param fechaInicial
   * @param fechaFinal
   * @param puntos 
   * @return
   */
  private String getKeyCache(Date fechaInicial, Date fechaFinal, double puntos) {
//    if (formato == null) {
//      formato = new SimpleDateFormat("yyyyMMdd");
//    }
    SimpleDateFormat formato = new SimpleDateFormat("yyyyMMdd");
    String fechaInicialStr=formato.format(fechaInicial);
    String fechaFinalStr=formato.format(fechaFinal);
    String puntosString = String.valueOf(puntos);
    return fechaInicialStr+fechaFinalStr+puntosString;
  }
  
  /**
   * Compara 2 fechas en año mes dia
   * @param fechaInicial
   * @param fechaFinal
   * @return
   */
  public boolean isFechaIgualYYYYMMMDD(Date fechaInicial, Date fechaFinal) {
//    if (formato == null) {
//      formato = new SimpleDateFormat("yyyyMMdd");
//    }
    SimpleDateFormat formato = new SimpleDateFormat("yyyyMMdd");
    String fechaInicialStr = formato.format(fechaInicial);
    String fechaFinalStr = formato.format(fechaFinal);
    return fechaInicialStr.equals(fechaFinalStr);
  }

  /**
   * @return the tasasInteresTipoTasaFechasMap
   */
  @SuppressWarnings({ "rawtypes", "unchecked" })
  private synchronized Map<String, ArrayList<TasaInteres>> getTasasInteresTipoTasaFechasMap() {
    if(mapaTasas != null){
      return mapaTasas;
    }
    CacheSpace<String, Map> cacheMapaTasas = CacheSystem.getInstance().getCacheSpace("MapasTasasFecha", String.class, Map.class);
    Map<String, ArrayList<TasaInteres>> tasasFechaMap = cacheMapaTasas.get(getUuidCompania() + getCode());
    if (tasasFechaMap == null) {
      mapaTasas = Collections.synchronizedMap(new HashMap<String, ArrayList<TasaInteres>>());
      cacheMapaTasas.put(getUuidCompania() + getCode(), mapaTasas);
    }
    return mapaTasas;
  }

  @Override
  public void save() {
    super.save();
    //Se inicializa el cache de las tasas de interes
    AdministradorTasasDeInteres.getInstance(this.getUuidCompania()).limparCache();
  }
  
  /**
   * Save par los fixture ojo
   * es para que no actualice el administrador
   */
  public void saveTest() {
    super.save();
  }
  
  
  
  /**
  * Elimina la cache de las tasas.
  *
  * @author Productora de software SA
  *         jgallego
  * @since 22/08/2014
  */
  @SuppressWarnings({ "rawtypes"})
  public void eliminarTasaCache() {
    //Cache de Tipo de Tasas
    CacheSpace<String, ArrayList> cacheTiposTasas = CacheSystem.getInstance().getCacheSpace("TiposTasas", String.class, ArrayList.class);
    cacheTiposTasas.clear();
    //Cache de Mapas de Tasa por Fecha para un tipo
    CacheSpace<String, HashMap> cacheMapaTasas = CacheSystem.getInstance().getCacheSpace("MapasTasasFecha", String.class, HashMap.class);
    cacheMapaTasas.clear();
  }  

}
